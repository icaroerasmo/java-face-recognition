package com.icaroerasmo;import java.nio.file.Path;import java.nio.file.Paths;import java.util.*;import com.icaroerasmo.model.FaceRecognition;import com.icaroerasmo.service.FaceRecognitionService;import com.icaroerasmo.service.RtspFrameExtractorService;import com.icaroerasmo.utils.MatUtil;import lombok.SneakyThrows;import lombok.extern.log4j.Log4j2;import org.bytedeco.opencv.opencv_face.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.CommandLineRunner;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import java.util.concurrent.atomic.AtomicInteger;import static org.bytedeco.opencv.global.opencv_imgcodecs.imwrite;@Log4j2@SpringBootApplicationpublic class JavaRtspFaceRecognition implements CommandLineRunner {    private static AtomicInteger count = new AtomicInteger(0);    @Autowired    private FaceRecognitionService faceRecognitionService;    @Autowired    private RtspFrameExtractorService rtspFrameExtractorService;    @Autowired    private MatUtil matUtil;    private static final Path DATASET = Paths.get("trained_dataset.xml");    public static void main(String[] args) {        SpringApplication.run(JavaRtspFaceRecognition.class, args);    }    @Override    @SneakyThrows    public void run(String... args) {        FaceRecognizer faceRecognizer;        if(DATASET.toFile().exists()) {            faceRecognizer = faceRecognitionService.load();        } else {            faceRecognizer = faceRecognitionService.train(args[0]);        }//        FaceRecognition testImage = faceRecognitionService.test(faceRecognizer, args[1]);////        imwrite("test.jpg",  testImage.getDetectionImg());////        testImage.getFaces().//                forEach(output -> {//                    final String label = output.getPersonName();//                    final Double confidence = output.getConfidence();//                    System.out.println("Predicted label: " + label.substring(0, label.length()-1) + " confidence: "+ confidence);//                });        rtspFrameExtractorService.extract((img) -> {            FaceRecognition faceRecognition = null;            try {                faceRecognition = faceRecognitionService.test(faceRecognizer, img);                if (faceRecognition.getFaces().isEmpty() || faceRecognition.getFaces() == null) {                    log.debug("No faces detected in the image.");                    return;                }                faceRecognition.getFaces().                        forEach(output -> {                            final String label = output.getPersonName();                            final Double confidence = output.getConfidence();                            matUtil.drawRectangleAndName(img, label, output.getFaceRect());                            imwrite(label+"_" + count.getAndIncrement() + ".jpg", img);                            log.info("Predicted label: {} confidence: {}", label, confidence);                        });            } catch (Exception e) {                log.error("Error processing frame", e);            } finally {                matUtil.releaseResources(img, faceRecognition.getDetectionImg());            }        });        faceRecognizer.close();    }}